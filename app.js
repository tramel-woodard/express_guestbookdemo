// importing necessary node.js 'http' interfaces and 'path' modules
var http = require("http");
var path = require("path");

// importing express module (for routing and middleware)
var express = require("express");

// importing morgan module to log server activity
var logger = require("morgan");

// importing body-parser module to generate log of all server requests
var bodyParser = require("body-parser");

// initiate 'app' variable with Express functionality
var app = express();

// setting up Express view engine to only recognize 'ejs' files from 'view' folder
app.set("views", path.resolve(__dirname, "views"));
app.set("view engine", "ejs");

// create 'entries' array to contain all messesages generated by 'guestbook' app
var entries = [];
// makes 'entries' array available in all views of 'guestbook' app
app.locals.entries = entries;

// use Morgan module to log every request to server
app.use(logger("dev"));

// uses 'body-parser' module to populate contents of message textarea into 'req.body' on form submit
app.use(bodyParser.urlencoded({ extended: false }));

// when visiting your root directory, app will render 'index.ejs' page from 'views' directory
app.get("/", function(req, res) {
    res.render("index");
});

// when visiting '/new-entry' page, app will render 'new-entry.ejs' page from 'views' directory
app.get("/new-entry", function(req, res) {
    res.render("new-entry");
});

// when posting '/new-entry' page (submit form to add new comment), callback function will confirm
// req.body.title (title of message) and req.body.body (body of message) both have a value.
// if neither have value, a '404' status will be sent to user along with a message to add both title
// and body value. If title and value contain values, message will be pushed to 'entries' array,
// with title, content and published (automatic Date() created) values. User then redirected to
// "/" (home page).
app.post("/new-entry", function(req, res) {
    if (!req.body.title || !req.body.body) {
        res.status(400).send("Entries must have a title and a body.");
        return;
    }
    entries.push({
        title: req.body.title,
        content: req.body.body,
        published: new Date()
    });
    res.redirect("/");
});

// after checking above middleware, all other routes will trigger server to respond with a 404 status
// and render '404' on page as text.
app.use(function(req, res) {
    res.status(404).render("404");
});

// utilize 'createServer' method of node's internal 'http' interfaces to bind server functionality
// to our Express 'app' variable. We will listen on port 3000 and return a callback function of
// a console message to our server.
http.createServer(app).listen(3000, function() {
    console.log("Guestbook app started on port 3000.");
});
